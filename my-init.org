#+TITLE: My Emacs configuration
#+AUTHOR: William Madruga
#+PROPERTY: header-args :comments yes :results silent
#+STARTUP: overview

* Init
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000)) ;; make startup faster by reducing garbage collection frequency
#+END_SRC


* UI tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-screen t
        initial-scratch-message nil)

  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Packages

** All the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC


** Awesome Tab
#+BEGIN_SRC emacs-lisp
  ;; git clone --depth=1 https://github.com/manateelazycat/awesome-tab.git
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/elisp/awesome-tab/"))
  (require 'awesome-tab)
  (awesome-tab-mode t)
  (awesome-tab-build-helm-source)
  (setq helm-source-list
        '(helm-source-awesome-tab-group))
#+END_SRC


** Clojure Development
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC


** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t)
(global-company-mode)

(setq company-idle-delay 0.0
      company-minimum-prefix-length 1)

(define-key company-mode-map (kbd "C-:") 'helm-company)
(define-key company-active-map (kbd "C-:") 'helm-company)
#+END_SRC


** Dashboard
#+BEGIN_SRC emacs-lisp
  ;; https://github.com/emacs-dashboard/emacs-dashboard
  (use-package dashboard
    :ensure t
    :config
    (progn
      (dashboard-setup-startup-hook)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-items '((recents  . 5)
                              (bookmarks . 10)
                              (projects . 10)
                              (agenda . 10)
                              (registers . 10)))))
#+END_SRC


** Define Word
#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :ensure t)
#+END_SRC


** Dracula Theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t)
#+END_SRC


** Drag Stuff
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :bind (("<M-up>" . drag-stuff-up)
   ("<M-down>" . drag-stuff-down)
   ("<M-left>" . drag-stuff-left)
   ("<M-right>" . drag-right-stuff)))
(drag-stuff-global-mode)
#+END_SRC


** Eshell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

  (use-package fish-completion
    :ensure t
    :config
    (global-fish-completion-mode))
  
  (use-package eshell-git-prompt
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'robbyrussell))

  (setq scroll-step 1)
#+END_SRC


** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  ;; Javascript support:

  ;; disable jshint
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; enable eslint
  (flycheck-add-mode 'javascript-eslint 'js2-mode)

  (setq-default flycheck-temp-prefix ".flycheck")

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
      '(json-jsonlist)))
#+END_SRC


** General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC


** Golden Ratio
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t)
(golden-ratio-mode)
#+END_SRC


** Helm
#+BEGIN_SRC emacs-lisp
  ; Incremental and narrowing framework
  (use-package helm
    :ensure t)

  ; Silver search with helm
  (use-package helm-ag
    :ensure t
    :config (global-set-key (kbd "s-F") 'helm-projectile-ag))

  ; Helm interface for company-mode
  (use-package helm-company
    :ensure t)

  ; Helm interface for projectile
  (use-package helm-projectile
    :ensure t
    :config (helm-projectile-on))
  (global-set-key (kbd "s-P") 'helm-projectile-find-file)
  (setq projectile-completion-system 'helm)

  ; Efficiently hopping squeezed lines
  (use-package helm-swoop
    :ensure t)

  ; Configuration
  (require 'helm-config)
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-projectile-on)
  (helm-autoresize-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (set-face-attribute 'helm-selection nil :background "darkblue")
  (setq helm-apropos-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-follow-mode-persistent t)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-move-to-line-cycle-in-source t)
  (setq helm-recentf-fuzzy-match t)
  (setq helm-split-window-inside-p t)

  (add-to-list 'helm-boring-buffer-regexp-list "\*.+\*")

#+END_SRC


** Javascript Support
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
  (setq js-indent-level 2)

#+END_SRC


** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "s-l")
    :hook (
           (js2-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package company-lsp
    :ensure t)

  (use-package helm-lsp
    :ensure t
    :commands helm-lsp-workspace-symbol)

  (use-package lsp-treemacs
    :ensure t
    :config (lsp-treemacs-sync-mode 1))
#+END_SRC


** Magit
#+BEGIN_SRC emacs-lisp
;; https://magit.vc/manual/magit.html
  (use-package magit
    :ensure t)
#+END_SRC


** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC


** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-bullet-list '("■" "◆" "▲" "▶")))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC


** Origami
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t)
  (global-origami-mode)
#+END_SRC


** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config (progn
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)))
(projectile-global-mode)
#+END_SRC


** REST Client
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC


** Slime
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t)

  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC


** Smart Parentheses
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t)
(add-hook 'js-mode-hook #'smartparens-mode)
(add-hook 'emacs-lisp-mode #'smartparens-mode)
#+END_SRC


** Treemacs
#+BEGIN_SRC emacs-lisp
  ;; https://github.com/Alexander-Miller/treemacs
  (use-package treemacs
    :ensure t
    :defer t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t
    :config
    (progn
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)))

#+END_SRC


** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t)
(which-key-mode)
#+END_SRC


** Yasnippet
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t)
  (yas-global-mode)
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC



* Defaults
#+BEGIN_SRC emacs-lisp
   (setq auto-revert-interval 1            ; Refresh buffers fast
         custom-file (make-temp-file "")   ; Discard customization's
         echo-keystrokes 0.1               ; Show keystrokes asap
         inhibit-startup-message t         ; No splash screen please
         initial-scratch-message nil       ; Clean scratch buffer
         recentf-max-saved-items 100       ; Show more recent files
         ring-bell-function 'ignore        ; Quiet
         sentence-end-double-space nil     ; No double space
         tab-width 2                       ; 2 spaces
         make-backup-files nil             ; stop creating backup~ files
         auto-save-default nil             ; stop creating #autosave# files
         create-lockfiles nil              ; stop creating .# files
     )

   (setq-default frame-title-format "%b (%f)"
                 indent-tabs-mode nil
                 fill-column 140
                 tab-width 2)

  (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                         ("delta" . ?Δ)
                                         ("gamma" . ?Γ)
                                         ("phi" . ?φ)
                                         ("psi" . ?ψ)))

(add-to-list 'exec-path "~/bin")
   (setenv "BROWSER" "firefox")
#+END_SRC


* Standard modes [on/off]
#+BEGIN_SRC emacs-lisp
  ;; Turn-off modes
  (dolist (mode
     '(menu-bar-mode                ; No menu bar
       tool-bar-mode                ; No toolbar
       scroll-bar-mode              ; No scroll bars
       blink-cursor-mode))          ; No blinking cursor
    (funcall mode 0))

  ;; Turn-on modes
  (dolist (mode
     '(abbrev-mode                  ; E.g. sopl -> System.out.println
       column-number-mode           ; Show column number in mode line
       delete-selection-mode        ; Replace selected text
       recentf-mode                 ; Recently opened files
       show-paren-mode              ; Highlight matching parentheses
       ))
    (funcall mode 1))
#+END_SRC


* Utils
** How long it takes to startup?
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+END_SRC
** Load private el
#+BEGIN_SRC emacs-lisp
  (add-hook
   'after-init-hook
   (lambda ()
     (let ((private-file (concat user-emacs-directory "elisp/private.el")))
       (when (file-exists-p private-file)
         (load-file private-file)))))
#+END_SRC
** Duplicate line
#+BEGIN_SRC emacs-lisp
  (defun duplicate-line ()
    (interactive)
    (let* ((cursor-column (current-column)))
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank)
      (move-to-column cursor-column)))
#+END_SRC
** ESHELL STUFF FROM Mike Zamansky
#+BEGIN_SRC emacs-lisp
;; Not In Use!
;; I need to go through all this and tweak to my liking
  (require 'cl-lib)
  (defun select-or-create (arg)
    "Commentary ARG."
    (if (string= arg "New eshell")
        (eshell t)
      (switch-to-buffer arg)))
  (defun eshell-switcher (&optional arg)
    "Commentary ARG."
    (interactive)
    (let* (
           (buffers (cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode)) (buffer-list)) )
           (names (mapcar (lambda (n) (buffer-name n)) buffers))
           (num-buffers (length buffers) )
           (in-eshellp (eq major-mode 'eshell-mode)))
      (cond ((eq num-buffers 0) (eshell (or arg t)))
            ((not in-eshellp) (switch-to-buffer (car buffers)))
            (t (select-or-create (completing-read "Select Shell:" (cons "New eshell" names)))))))

  (defun eshell/in-term (prog &rest args)
    "Run shell command in term buffer."
    (switch-to-buffer (apply #'make-term prog prog nil args))
    (term-mode)
    (term-char-mode))
#+END_SRC
** Upload to Netsuite
#+BEGIN_SRC emacs-lisp
;; Run my shellscript to upload buffer to Netsuite.
;; I also wrote this in elisp and clojure but I'm still not satisfied with the speed.
;; it's currently faster to use my shellscript.
  (defun upload-to-netsuite ()
    "Send buffer to Netsuite."
    (interactive)
    (let ((cmd (concat "ns-upload" " " (buffer-file-name))))
      (message (shell-command-to-string cmd))
      ))
#+END_SRC
** Emacs Server Shutdown
#+BEGIN_SRC emacs-lisp
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs)
    )
#+END_SRC


* Keybindings & Hooks
#+BEGIN_SRC emacs-lisp

  (add-hook 'prog-mode-hook 'flyspell-prog-mode)        ;; spell Check

  ;; General
  (general-define-key
   "C-a" 'mark-whole-buffer
   "<C-s-down>" 'duplicate-line
   "C-c d" 'define-word-at-point
   "C-c f" 'origami-forward-toggle-node
   "C-c (" 'origami-close-all-nodes
   "C-c )" 'origami-open-all-nodes
   "C-c u" 'upload-to-netsuite
   "C-c C-x j" 'cider-jack-in
   "C-x b" 'helm-mini
   "<f8>" 'treemacs
   "s-<f8>" 'treemacs-add-project-to-workspace
   )


#+END_SRC
